---
#--------------------на обоих серверах
- name: Install pgsql
  yum: 
    name:
      - https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
      - epel-release
    state: installed
  tags: skip-install-web

- name: Install postgresql14
  yum:
    name: postgresql14-server
    state: installed
  tags: skip-install-pgsql14


- name: install from local
  shell: "yum -y localinstall /vagrant/*rpm"
# - name: install from local
#   yum:
#     name: /vagrant/*rpm
#     state: installed
#   tags: skip-localinstall

- name: mkdir directory for mount disks
  file: 
    path: /pgsql
    state: directory
    owner: postgres
    group: postgres
  tags: mkdir-pgsql

- name: create disks pgdata
  community.general.lvg:
    vg: pgdata
    pvs: /dev/sdb
  tags: create-disk-pgdata

- name: mount for FREE - pgdata
  community.general.lvol:
    vg: pgdata
    lv: pgdata
    size: 100%VG
  tags: mount-FREE-pgdata

- name: create disks pgwal
  community.general.lvg:
    vg: pgwal
    pvs: /dev/sdc
  tags: create-disk-pgwal

- name: mount for FREE - pgwal
  community.general.lvol:
    vg: pgwal
    lv: pgwal
    size: 100%VG
  tags: mount-FREE-pgwal

- name: mkfs pgdata
  community.general.filesystem:
    fstype: xfs
    dev: /dev/mapper/pgdata-pgdata
  tags: mkfs-pgdata

- name: mkfs pgwal
  community.general.filesystem:
    fstype: xfs
    dev: /dev/mapper/pgwal-pgwal
  tags: mkfs-pgwal

- name: Mount an NFS volume
  ansible.posix.mount:
    src: /dev/mapper/pgwal-pgwal
    path: /pgsql/pg_wal/14/
    state: mounted
    fstype: xfs
  tags: mount-nfs

- name: Mount an NFS volume
  ansible.posix.mount:
    src: /dev/mapper/pgdata-pgdata
    path: /pgsql/pg_data/14/
    state: mounted
    fstype: xfs
  tags: mount-nfs

- name: mkdir directory
  file: 
    path: /pgsql/pg_data
    state: directory
    owner: postgres
    group: postgres
  tags: mkdir-pg_data

- name: mkdir directory
  file: 
    path: /pgsql/pg_wal
    state: directory
    owner: postgres
    group: postgres
  tags: mkdir-pg_data

- name: chown /pgsql/ for postgres
  ansible.builtin.file:
    path: /pgsql/
    state: directory
    recurse: yes
    owner: postgres
    group: postgres
  tags: chown-pgsql

- name: config postgresql.yml
  template:
    src: postgresql.yml
    dest: /opt/app/patroni/etc/postgresql.yml
    owner: postgres
    group: postgres
  tags: patroni-temp

- name: mkdir directory patroni
  file: 
    path: /var/log/patroni
    state: directory
    owner: postgres
    group: postgres 
  tags: mkdir-patroni


- name: mkdir directory postgres
  file: 
    path: /var/log/postgres
    state: directory
    owner: postgres
    group: postgres
  tags: mkdir-postgres

- name: environment
  template:
    src: environment
    dest: /etc/environment
    owner: root
    owner: root
  notify: 
  - start patroni-watchdog
  tags: environment

# - name: start patroni-watchdog
#   ansible.builtin.systemd:
#     name: patroni-watchdog.service
#     state: started
#     enabled: yes
#   tags: start-watchdog

- name: Pause for 20 seconds between patroni and watchdog
  pause:
    seconds: 20
  notify: 
  - start patroni
  tags: sleep-someseconds

# - name: start patroni
#   ansible.builtin.systemd:
#     name: patroni
#     state: started
#     enabled: yes
#   tags: start-patroni
  
- name: Read gossip encryption key from previously boostrapped server
  shell: 'cat /etc/consul.d/consul.hcl | grep "^encrypt = " | sed -E ''s/encrypt = "(.+)",?/\1/'' | sed ''s/^ *//;s/ *$//'''
  register: consul_key_read
  changed_when: false
  tags: vip-token

- name: Set fact gossip encryption key from existing configuration
  set_fact:
    consul_token: "{{ consul_key_read.stdout }}"
  when: consul_key_read.stdout != ''
  tags: vip-token

- name: VIP-manager templete
  template:
    src: vip-manager.yml
    dest: /etc/default/vip-manager.yml
  notify: 
  - start vip
  tags: vip-temp

# - name: start vip
#   ansible.builtin.systemd:
#     name: vip-manager.service
#     state: started
#     enabled: yes
#   tags: start-vip


#----------------------------------------nfs
- name: Install nfs-utils
  yum: 
    name: nfs-utils
    state: installed
  tags: install-nfs

- name: mkdir directory pg_backup
  file: 
    path: /pgsql/pg_backup
    state: directory
    owner: postgres
    group: postgres
  tags: mkdir-/pgsql/backup

- name: Mount an NFS volume
  ansible.posix.mount:
    src: 192.168.100.100:/srv/backup
    path: /pgsql/pg_backup
    state: mounted
    fstype: nfs
  tags: mount-nfs

- name: rpm-packet
  yum:
    name: https://repo.postgrespro.ru/pg_probackup/keys/pg_probackup-repo-centos.noarch.rpm
  tags: rpm-probackup
  
- name: install probackup
  yum: 
    name: pg_probackup-14
    state: installed
  tags: install probackup


#------------------------После проигрывания playbook.yml зайти на сервера, которые указаны и проделать команды. 
#------------------------Данные команды делаются в ручную от имени postgress
# 
#   server:pg1
#   pg_probackup-14 init -B /pgsql/pg_backup/
# 
# 
#   server:pg1
#   pg_probackup-14 add-instance -B /pgsql/pg_backup/ -D /pgsql/pg_data/14/ --instance sirius
# 
# 
#   server:pg2 добавить файл /pgsql/pg_backup/backup.sql
#   в котором будет вписано такие строки
# BEGIN;
# CREATE ROLE backup WITH LOGIN;
# GRANT USAGE ON SCHEMA pg_catalog TO backup;
# GRANT EXECUTE ON FUNCTION pg_catalog.current_setting(text) TO backup;
# GRANT EXECUTE ON FUNCTION pg_catalog.set_config(text, text, boolean) TO backup;
# GRANT EXECUTE ON FUNCTION pg_catalog.pg_is_in_recovery() TO backup;
# GRANT EXECUTE ON FUNCTION pg_catalog.pg_start_backup(text, boolean, boolean) TO backup;
# GRANT EXECUTE ON FUNCTION pg_catalog.pg_stop_backup(boolean, boolean) TO backup;
# GRANT EXECUTE ON FUNCTION pg_catalog.pg_create_restore_point(text) TO backup;
# GRANT EXECUTE ON FUNCTION pg_catalog.pg_switch_wal() TO backup;
# GRANT EXECUTE ON FUNCTION pg_catalog.pg_last_wal_replay_lsn() TO backup;
# GRANT EXECUTE ON FUNCTION pg_catalog.txid_current() TO backup;
# GRANT EXECUTE ON FUNCTION pg_catalog.txid_current_snapshot() TO backup;
# GRANT EXECUTE ON FUNCTION pg_catalog.txid_snapshot_xmax(txid_snapshot) TO backup;
# GRANT EXECUTE ON FUNCTION pg_catalog.pg_control_checkpoint() TO backup;
# COMMIT;
# 
#   server:pg2 
#   psql -f /pgsql/pg_backup/backup.sql
# 
# 
#   server:pg2 
#   pg_probackup-14 backup -B /pgsql/pg_backup --instance sirius -b FULL
